{"mappings":"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","sources":["playground/wasm_rustfmt.js"],"sourcesContent":["\n(function() {\n  var wasm;\n  const __exports = {};\n  \n  \n  const __wbg_error_cc95a3d302735ca3_target = console.error;\n  \n  let cachedDecoder = new TextDecoder('utf-8');\n  \n  let cachegetUint8Memory = null;\n  function getUint8Memory() {\n      if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n          cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n      }\n      return cachegetUint8Memory;\n  }\n  \n  function getStringFromWasm(ptr, len) {\n      return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n  }\n  \n  __exports.__wbg_error_cc95a3d302735ca3 = function(arg0, arg1) {\n      let varg0 = getStringFromWasm(arg0, arg1);\n      \n      varg0 = varg0.slice();\n      wasm.__wbindgen_free(arg0, arg1 * 1);\n      \n      __wbg_error_cc95a3d302735ca3_target(varg0);\n  };\n  \n  let cachedEncoder = new TextEncoder('utf-8');\n  \n  function passStringToWasm(arg) {\n      \n      const buf = cachedEncoder.encode(arg);\n      const ptr = wasm.__wbindgen_malloc(buf.length);\n      getUint8Memory().set(buf, ptr);\n      return [ptr, buf.length];\n  }\n  /**\n  * @param {string} arg0\n  * @returns {RustfmtResult}\n  */\n  __exports.rustfmt = function(arg0) {\n      const [ptr0, len0] = passStringToWasm(arg0);\n      try {\n          return RustfmtResult.__construct(wasm.rustfmt(ptr0, len0));\n          \n      } finally {\n          wasm.__wbindgen_free(ptr0, len0 * 1);\n          \n      }\n      \n  };\n  \n  let cachedGlobalArgumentPtr = null;\n  function globalArgumentPtr() {\n      if (cachedGlobalArgumentPtr === null) {\n          cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n      }\n      return cachedGlobalArgumentPtr;\n  }\n  \n  let cachegetUint32Memory = null;\n  function getUint32Memory() {\n      if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n          cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n      }\n      return cachegetUint32Memory;\n  }\n  \n  function freeRustfmtResult(ptr) {\n      \n      wasm.__wbg_rustfmtresult_free(ptr);\n  }\n  /**\n  */\n  class RustfmtResult {\n      \n      static __construct(ptr) {\n          return new RustfmtResult(ptr);\n      }\n      \n      constructor(ptr) {\n          this.ptr = ptr;\n          \n      }\n      \n      free() {\n          const ptr = this.ptr;\n          this.ptr = 0;\n          freeRustfmtResult(ptr);\n      }\n      /**\n      * @returns {string}\n      */\n      code() {\n          if (this.ptr === 0) {\n              throw new Error('Attempt to use a moved value');\n          }\n          const retptr = globalArgumentPtr();\n          wasm.rustfmtresult_code(retptr, this.ptr);\n          const mem = getUint32Memory();\n          const rustptr = mem[retptr / 4];\n          const rustlen = mem[retptr / 4 + 1];\n          \n          const realRet = getStringFromWasm(rustptr, rustlen).slice();\n          wasm.__wbindgen_free(rustptr, rustlen * 1);\n          return realRet;\n          \n      }\n      /**\n      * @returns {string}\n      */\n      error() {\n          if (this.ptr === 0) {\n              throw new Error('Attempt to use a moved value');\n          }\n          const retptr = globalArgumentPtr();\n          wasm.rustfmtresult_error(retptr, this.ptr);\n          const mem = getUint32Memory();\n          const rustptr = mem[retptr / 4];\n          const rustlen = mem[retptr / 4 + 1];\n          if (rustptr === 0) return;\n          const realRet = getStringFromWasm(rustptr, rustlen).slice();\n          wasm.__wbindgen_free(rustptr, rustlen * 1);\n          return realRet;\n          \n      }\n  }\n  __exports.RustfmtResult = RustfmtResult;\n  \n  __exports.__wbindgen_throw = function(ptr, len) {\n      throw new Error(getStringFromWasm(ptr, len));\n  };\n  \n  function init(wasm_path) {\n      const fetchPromise = fetch(wasm_path);\n      let resultPromise;\n      if (typeof WebAssembly.instantiateStreaming === 'function') {\n          resultPromise = WebAssembly.instantiateStreaming(fetchPromise, { './wasm_rustfmt': __exports });\n      } else {\n          resultPromise = fetchPromise\n          .then(response => response.arrayBuffer())\n          .then(buffer => WebAssembly.instantiate(buffer, { './wasm_rustfmt': __exports }));\n      }\n      return resultPromise.then(({instance}) => {\n          wasm = init.wasm = instance.exports;\n          return;\n      });\n  };\n  self.wasm_bindgen = Object.assign(init, __exports);\n})();\n\n"],"names":[],"version":3,"file":"index.2d34dfe2.js.map","sourceRoot":"/__parcel_source_root/"}